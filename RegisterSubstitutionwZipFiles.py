import re
import os
import zipfile

def substitute_registers(asm_code):

    instruction_pattern = re.compile(r"(LEA|MOV|MOVZX|PUSH|CMP|SHR)\s+(EAX|ECX|EDX|EBX|ESP|EBP|ESI|EDI)(?:,\s*(EAX|ECX|EDX|EBX|ESP|EBP|ESI|EDI|DWORD PTR [\w:]+))?")


    register_map = {
        "EAX": "EBX",
        "ECX": "EDX",
        "EDX": "ECX",
        "EBX": "EAX",
        "ESP": "EBP",
        "EBP": "ESP",
        "ESI": "EDI",
        "EDI": "ESI"
    }

    lines = asm_code.split('\n')
    result_lines = []

    for line in lines:
        instruction_match = instruction_pattern.match(line)

        if instruction_match:
            instruction, reg1, reg2 = instruction_match.groups()
            if reg1 in register_map:
                line = line.replace(reg1, register_map[reg1])
            if reg2 and reg2 in register_map:
                line = line.replace(reg2, register_map[reg2])

        result_lines.append(line)


    result_asm_code = '\n'.join(result_lines)
    return result_asm_code

def process_assembly_file(file_path):

    with open(file_path, 'r') as file:
        asm_code = file.read()


    processed_asm_code = substitute_registers(asm_code)


    with open(file_path, 'w') as file:
        file.write(processed_asm_code)

def process_zip_file(zip_path, output_zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:

        temp_dir = 'temp_asm_files'
        os.makedirs(temp_dir, exist_ok=True)


        zip_ref.extractall(temp_dir)


    for root, dirs, files in os.walk(temp_dir):
        for file in files:
            file_path = os.path.join(root, file)
            process_assembly_file(file_path)


    with zipfile.ZipFile(output_zip_path, 'w') as zip_ref:
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, temp_dir)
                zip_ref.write(file_path, arcname=arcname)


    for root, dirs, files in os.walk(temp_dir, topdown=False):
        for file in files:
            os.remove(os.path.join(root, file))
        for dir in dirs:
            os.rmdir(os.path.join(root, dir))
    os.rmdir(temp_dir)


input_zip_path = 'assembly.zip'
output_zip_path = 'assembly_with_register_substitution.zip'


process_zip_file(input_zip_path, output_zip_path)
