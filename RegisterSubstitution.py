import re
import os
import tarfile

def substitute_registers(asm_code):

    instruction_pattern = re.compile(r"(LEA|MOV|MOVZX|PUSH|CMP|SHR)\s+(EAX|ECX|EDX|EBX|ESP|EBP|ESI|EDI)(?:,\s*(EAX|ECX|EDX|EBX|ESP|EBP|ESI|EDI|DWORD PTR [\w:]+))?")

    # Define the register substitution map
    register_map = {
        "EAX": "EBX",
        "ECX": "EDX",
        "EDX": "ECX",
        "EBX": "EAX",
        "ESP": "EBP",
        "EBP": "ESP",
        "ESI": "EDI",
        "EDI": "ESI"
    }

    lines = asm_code.split('\n')
    result_lines = []

    for line in lines:
        instruction_match = instruction_pattern.match(line)

        if instruction_match:
            instruction, reg1, reg2 = instruction_match.groups()
            if reg1 in register_map:
                line = line.replace(reg1, register_map[reg1])
            if reg2 and reg2 in register_map:
                line = line.replace(reg2, register_map[reg2])

        result_lines.append(line)

    # Join the processed lines back into a single string
    result_asm_code = '\n'.join(result_lines)
    return result_asm_code

def process_assembly_file(file_path):
    # Read the content of the file
    with open(file_path, 'r') as file:
        asm_code = file.read()

    # Process the assembly code
    processed_asm_code = substitute_registers(asm_code)

    # Write the processed assembly code back to the file
    with open(file_path, 'w') as file:
        file.write(processed_asm_code)

def process_tar_file(tar_path, output_tar_path):
    with tarfile.open(tar_path, 'r:gz') as tar:
        # Create a temporary directory to extract the files
        temp_dir = 'temp_asm_files'
        os.makedirs(temp_dir, exist_ok=True)

        # Extract all files to the temporary directory
        tar.extractall(path=temp_dir)

    # Process each extracted file
    for root, dirs, files in os.walk(temp_dir):
        for file in files:
            file_path = os.path.join(root, file)
            process_assembly_file(file_path)

    # Create a new tar.gz file with the processed files
    with tarfile.open(output_tar_path, 'w:gz') as tar:
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, temp_dir)
                tar.add(file_path, arcname=arcname)

    # Clean up the temporary directory
    for root, dirs, files in os.walk(temp_dir, topdown=False):
        for file in files:
            os.remove(os.path.join(root, file))
        for dir in dirs:
            os.rmdir(os.path.join(root, dir))
    os.rmdir(temp_dir)


input_tar_path = 'Assembly_blocks.tar.gz'
output_tar_path = 'Assembly_blocks_with_register_substitution.tar.gz'


process_tar_file(input_tar_path, output_tar_path)
