import zipfile
import pandas as pd

# Function to extract contents of a zip file into a dictionary
def extract_zip_to_dict(zip_path):
    contents = {}
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        for file_name in zip_ref.namelist():
            with zip_ref.open(file_name) as file:
                contents[file_name] = file.read().decode('utf-8')
    return contents


zip_files = [
    ('assembly_part_1_formatted.zip', 'assembly_part_1_with_register_transpose_formatted.zip', 'Transpose'),
    ('assembly_part_2_formatted.zip', 'assembly_part_2_with_dead_code_formatted.zip', 'Dead Code'),
    ('assembly_part_3_formatted.zip', 'assembly_part_3_register_substitution_formatted.zip', 'Register Substitution')
]

# Initialize lists to hold the data
original_data = []
modified_data = []
modification_types = []

# Process each pair of zip files
for original_zip_path, modified_zip_path, modification_type in zip_files:
    # Extract contents with file names
    original_contents_dict = extract_zip_to_dict(original_zip_path)
    modified_contents_dict = extract_zip_to_dict(modified_zip_path)

    # Debugging information
    original_file_names = set(original_contents_dict.keys())
    modified_file_names = set(modified_contents_dict.keys())

    print(f"Original file names for {modification_type}: {original_file_names}")
    print(f"Modified file names for {modification_type}: {modified_file_names}")

    # Identify common and mismatched file names
    common_files = original_file_names & modified_file_names
    mismatched_original = original_file_names - modified_file_names
    mismatched_modified = modified_file_names - original_file_names

    print(f"Mismatched in original for {modification_type}: {mismatched_original}")
    print(f"Mismatched in modified for {modification_type}: {mismatched_modified}")

    # Add a blank row before a new modification type
    if original_data:
        original_data.append("")
        modified_data.append("")
        modification_types.append("")

    # Prepare data for the DataFrame
    for file in common_files:
        original_data.append(original_contents_dict[file])
        modified_data.append(modified_contents_dict[file])
        modification_types.append(modification_type)

# Create DataFrame
data = {
    'original': original_data,
    'modified': modified_data,
    'type of modification': modification_types
}

df = pd.DataFrame(data)


df.to_csv('sample.csv', index=False)

print('CSV file created successfully.')
